{"version":3,"sources":["index.js","src/btmanager.js","src/extends.js","src/enum.js","src/bluetooth.js","src/tools.js","src/promisify.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AELA,AHSA,AENA,ADGA;AELA,AHSA,AENA,ADGA,AGTA;ADIA,AHSA,AENA,ADGA,AGTA;ADIA,AHSA,AENA,ADGA,AGTA;ADIA,AHSA,AENA,ADGA,AIZA,ADGA;ADIA,AHSA,AENA,ADGA,AIZA,ADGA;ADIA,AHSA,AENA,ADGA,AIZA,ADGA;ADIA,AHSA,AENA,ADGA,AIZA,ADGA;ADIA,AHSA,AENA,ADGA,AIZA,ADGA;ADIA,AHSA,AENA,ADGA,AIZA,ADGA;ADIA,AHSA,AENA,ADGA,AIZA,ADGA;ADIA,AHSA,AENA,ADGA,AIZA,ADGA;ADIA,AHSA,AENA,ADGA,AIZA,ADGA;ADIA,AHSA,AENA,ADGA,AIZA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AENA,AGTA,ADGA;ADIA,AHSA,AKfA,ADGA;ADIA,AHSA,AKfA,ADGA;ADIA,AHSA,AKfA,ADGA;ADIA,AHSA,AKfA,ADGA;ADIA,AHSA,AKfA,ADGA;ADIA,AHSA,AKfA,ADGA;ADIA,AHSA,AKfA,ADGA;ADIA,AHSA,AKfA,ADGA;ADIA,AHSA,AKfA,ADGA;ADIA,AHSA,AKfA,ADGA;ADIA,AHSA,AKfA,ADGA;ADIA,AHSA,AKfA,ADGA;ADIA,AHSA,AKfA,ADGA;ADIA,AHSA,AKfA,ADGA;ADIA,AHSA,AKfA,ADGA;ADIA,AHSA,AKfA,ADGA;ADIA,AHSA,AKfA,ADGA;ADIA,AHSA,AKfA,ADGA;ADIA,AHSA,AKfA,ADGA;ADIA,AHSA,AKfA,ADGA;ADIA,AHSA,AKfA,ADGA;ADIA,AHSA,AKfA,ADGA;ADIA,AHSA,AKfA,ADGA;ADIA,AHSA,AKfA,ADGA;ADIA,AHSA,AKfA,ADGA;ADIA,AHSA,AKfA,ADGA;ADIA,AHSA,AKfA,ADGA;ADIA,AHSA,AKfA,ADGA;ADIA,AHSA,AKfA,ADGA;ADIA,AHSA,AKfA,ADGA;ADIA,AHSA,AKfA,ADGA;ADIA,AHSA,AKfA,ADGA;ADIA,AHSA,AKfA,ADGA;ADIA,AHSA,AKfA,ADGA;ADIA,AHSA,AKfA;AFOA,AHSA,AKfA;AFOA,AHSA,AKfA;AFOA,AHSA,AKfA;AFOA,AHSA,AKfA;AFOA,AHSA,AKfA;AFOA,AHSA,AKfA;AFOA,AHSA,AKfA;AFOA,AHSA,AKfA;AFOA,AHSA,AKfA;AFOA,AHSA,AKfA;AFOA,AHSA,AKfA;AFOA,AHSA,AKfA;AFOA,AHSA,AKfA;AFOA,AHSA,AKfA;AFOA,AHSA,AKfA;AFOA,AHSA,AKfA;AFOA,AHSA,AKfA;AFOA,AHSA,AKfA;AFOA,AHSA,AKfA;AFOA,AHSA,AKfA;AFOA,AHSA,AKfA;AFOA,AHSA,AKfA;AFOA,AHSA,AKfA;AFOA,AHSA,AKfA;AFOA,AHSA,AKfA;AFOA,AHSA,AKfA;AFOA,AHSA,AKfA;AFOA,AHSA,AKfA;AFOA,AHSA,AKfA;AFOA,AHSA,AKfA;AFOA,AHSA,AKfA;AFOA,AHSA,AKfA;AFOA,AHSA,AKfA;AFOA,AHSA,AKfA;AFOA,AHSA,AKfA;AFOA,AHSA,AKffile":"index.js","sourcesContent":["\nvar __TEMP__ = require('./src/btmanager.js');var BTManager = __TEMP__['BTManager'];\nvar __TEMP__ = require('./src/enum.js');var ConnectStatus = __TEMP__['ConnectStatus'];var SuccessCallbackEvent = __TEMP__['SuccessCallbackEvent'];var ErrorCallbackEvent = __TEMP__['ErrorCallbackEvent'];var SuccessApiThen = __TEMP__['SuccessApiThen'];var ErrorApiCatch = __TEMP__['ErrorApiCatch'];\nconst Version = '1.1.0';\n\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });Object.defineProperty(exports, 'Version', { enumerable: true, get: function() { return Version; } });Object.defineProperty(exports, 'BTManager', { enumerable: true, get: function() { return BTManager; } });Object.defineProperty(exports, 'ConnectStatus', { enumerable: true, get: function() { return ConnectStatus; } });Object.defineProperty(exports, 'SuccessCallbackEvent', { enumerable: true, get: function() { return SuccessCallbackEvent; } });Object.defineProperty(exports, 'ErrorCallbackEvent', { enumerable: true, get: function() { return ErrorCallbackEvent; } });Object.defineProperty(exports, 'SuccessApiThen', { enumerable: true, get: function() { return SuccessApiThen; } });Object.defineProperty(exports, 'ErrorApiCatch', { enumerable: true, get: function() { return ErrorApiCatch; } });\n\n\n\n\n\n\n\n","\n\nvar __TEMP__ = require('./extends.js');var Log = __TEMP__['Log'];\nvar __TEMP__ = require('./enum.js');var ConnectStatus = __TEMP__['ConnectStatus'];\nvar __TEMP__ = require('./bluetooth.js');var Bluetooth = __REQUIRE_DEFAULT__(__TEMP__);\n\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.BTManager = class BTManager {\n\n  /**\n   *  构造函数\n   *\n   *  @param {object} config          配置\n   *   @property {boolean} debug       是否开启打印调试，默认不开启\n   * \n   *  @discussion 单例模式。\n   */\n  constructor(config = {}) {\n    if (!BTManager.instance) {\n      BTManager.instance = this;\n      // 初始化log\n      Log.call(BTManager.prototype);\n      // 初始化设备信息\n      this.deviceInfo = {};\n      // 初始化连接状态\n      this.connectStatus = ConnectStatus.disconnected;\n      // 初始化蓝牙管理器\n      this._bt = new Bluetooth(this);\n    }\n    // 合并配置\n    Object.assign(BTManager.instance, config);\n    return BTManager.instance;\n  }\n\n  /**\n   *  扫描外设\n   *\n   *  @param {object} options                扫描参数\n   *   @property {array} services             主service的uuid列表。确认在蓝牙广播中存在此服务id，可以通过服务id过滤掉其他设备\n   *   @property {boolean} allowDuplicatesKey 是否允许重复上报设备\n   *   @property {number} interval            上报新设备的间隔，默认为0\n   *   @property {number} timeout             扫描超时时间，毫秒。在该时间内未扫描到符合要求的设备，上报超时。默认15000ms，-1表示无限超时\n   *   @property {string} deviceName          通过蓝牙名称过滤，需要匹配的设备名称\n   *   @property {string} containName         通过蓝牙名称过滤，需要包含的设备名称\n   * \n   *  @return Promise对象\n   * \n   *  @discussion 开始扫描外设，注意实现返回对象的then和catch方法，监听接口是否调用成功。\n   *              此操作比较耗费系统资源，请在搜索到设备后调用stopScan方法停止扫描。\n   *              重复调用此接口，会清空之前设备存储，再次上报已上报的设备，能够起到刷新的作用。\n   * \n   *  @see registerDidDiscoverDevice\n   */\n  scan( options = { \n          services: [],\n          allowDuplicatesKey: false,\n          interval : 0,\n          timeout: 15000,\n          deviceName: '', \n          containName:''\n      }) \n  {\n    return this._bt.scanDevice(options);\n  }\n\n  /**\n   *  停止扫描\n   *\n   *  @return Promise对象\n   * \n   *  @discussion 停止扫描，取消超时延时。\n   */\n  stopScan() {\n    return this._bt.stopScan();\n  }\n\n  /**\n   *  连接外设\n   * \n   *  @param {object} device  指定连接的外设对象，从registerDidDiscoverDevice注册的回调中得到\n   *  @param {number} timeout 连接超时时间，毫秒，默认15000ms，支付宝小程序无效\n   * \n   *  @return Promise对象\n   * \n   *  @discussion 连接指定的外设，需要传入外设对象。\n   *              注意实现返回对象的then和catch方法，监听接口是否调用成功。\n   */\n  connect(device , timeout) {\n    if (!device) throw new Error('device is undefiend');\n    return this._bt.connect(device);\n  }\n\n  /**\n   *  断开连接\n   * \n   *  @return Promise对象\n   */\n  disconnect() {\n    return this._bt.disconnect();\n  }\n\n  /**\n   *  读特征值\n   * \n   *  @param {object} params     参数\n   *   @property {string} suuid    特征对应的服务uuid\n   *   @property {string} cuuid    特征uuid\n   * \n   *  @return Promise对象\n   * \n   *  @discussion 读某个服务下的某个特征值。\n   */\n  read(params = {\n        suuid: '',\n        cuuid: ''\n      }) \n  {\n    return this._bt.read(params);\n  }\n\n  /**\n   *  向蓝牙模块写入数据\n   * \n   *  @param {object} params        参数\n   *   @property {string} suuid       特征对应的服务uuid\n   *   @property {string} cuuid       特征uuid\n   *   @property {Hex string} value   16进制字符串 \n   * \n   *  @return Promise对象\n   * \n   *  @discussion 向蓝牙模块写入数据。\n   */\n  write(params = {\n          suuid: '',\n          cuuid: '',\n          value: ''\n       })\n  {\n    return this._bt.write(params);\n  }\n\n  /**\n   *  监听特征值改变\n   * \n   *  @param {object} params        参数\n   *   @property {string} suuid       特征对应的服务uuid\n   *   @property {string} cuuid       特征uuid\n   *   @property {boolean} state      是否启用notify，可以通过重复调用接口改变此属性打开/关闭监听  \n   * \n   *  @return Promise对象\n   * \n   *  @discussion 监听某个特征值变化。\n   */\n  notify(params = {\n          suuid: '',\n          cuuid: '',\n          state: true,\n        }) \n  {\n    return this._bt.notify(params);\n  }\n\n  /**\n   *  注册状态改变回调\n   *\n   *  @param {function} cb 回调函数\n   * \n   *  @discussion 连接状态发生改变时，回调此方法。\n   */\n  registerDidUpdateConnectStatus(cb) {\n    if (typeof cb !== 'function') throw new TypeError('connectStatus callback expect function');\n    this._bt.registerDidUpdateConnectStatus(cb);\n  }\n\n  /**\n   *  注册发现外设回调\n   *\n   *  @param {function} cb 回调函数\n   * \n   *  @discussion 当扫描到设备时回调，或者达到超时时间回调。\n   */\n  registerDidDiscoverDevice(cb) {\n    if (typeof cb !== 'function') throw new TypeError('discoverDevice callback expect function');\n    this._bt.registerDidDiscoverDevice(cb);\n  }\n\n  /**\n   *  注册\b特征值改变回调\n   *\n   *  @param {function} cb 回调函数\n   * \n   *  @discussion 当监听的特征值改变时回调，或者读特征值时回调。\n   */\n  registerDidUpdateValueForCharacteristic(cb) {\n    if (typeof cb !== 'function') throw new TypeError('updateValueForCharacteristic callback expect function');\n    this._bt.registerDidUpdateValueForCharacteristic(cb);\n  }\n\n};","\n\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.Log = function Log() {\n\n  this.log = function(identifier, msg='') {\n    this.debug && console.log(`BLE:（${identifier}）:` , msg);\n  }\n\n  this.loginfo = function(identifier,msg) {\n    this.debug && console.info(`BLE:（${identifier}）:` ,msg);\n  }\n\n  this.logwarn = function (identifier, msg) {\n    this.debug && console.warn(`BLE:（${identifier}）:`, msg);\n  }\n\n  this.logerror = function (identifier, msg) {\n    this.debug && console.error(`BLE:（${identifier}）:`, msg);\n  }\n\n};\n","\n// 连接状态\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });var ConnectStatus = exports.ConnectStatus = {\n  // 未连接或连接断开，允许连接\n  disconnected: 0,\n  // 正在连接，不允许再连接\n  connecting: 1,\n  // 已连接，不允许再连接\n  connected: 2,\n};\n\n// 发现外设回调和连接状态改变回调成功事件\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });var SuccessCallbackEvent = exports.SuccessCallbackEvent = {\n  Success_DiscoverDevice_CB_Discover:  { code: 210, message: '发现外设' },\n  Success_DiscoverDevice_CB_ScanDone:  { code: 211, message: '扫描完成' },\n  Success_ConnectStatus_CB_PowerOn:    { code: 220, message: '蓝牙打开' },\n  Success_ConnectStatus_CB_Connecting: { code: 221, message: '正在连接' },\n  Success_ConnectStatus_CB_Connected:  { code: 222, message: '连接成功' },\n  Success_ConnectStatus_CB_Stop:       { code: 223, message: '断开成功' },\n};\n\n// 发现外设回调和连接状态改变回调失败事件\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });var ErrorCallbackEvent = exports.ErrorCallbackEvent = {\n  Error_DiscoverDevice_CB_Timeout:     { code: 410, message: '扫描超时' },\n  Error_ConnectStatus_CB_PowerOff:     { code: 420, message: '蓝牙关闭' },\n  Error_ConnectStatus_CB_ConnectFail:  { code: 421, message: '连接失败' },\n  Error_ConnectStatus_CB_Disconnected: { code: 422, message: '连接断开' },\n};\n\n// 接口调用成功事件\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });var SuccessApiThen = exports.SuccessApiThen = {\n  Success_Scan:       { code: 2010, message: '\b扫描接口成功调用' },\n  Success_StopScan:   { code: 2020, message: '\b停止扫描接口成功调用' },\n  Success_Connect:    { code: 2030, message: '\b连接接口成功调用' },\n  Success_Disconnect: { code: 2040, message: '\b断开接口成功调用' },\n  Success_Read:       { code: 2050, message: '\b读特征值接口成功调用' },\n  Success_Write:      { code: 2060, message: '\b写入数据接口成功调用' },\n  Success_Notify:     { code: 2070, message: '\b监听特征值接口成功调用' },\n};\n\n// 接口调用失败事件\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });var ErrorApiCatch = exports.ErrorApiCatch = {\n  // 基础库版本低\n  Error_Low_Version:              { code: 4000, message: '当前基础库版本低，请更新微信版本' },\n  // Api: scan\n  Error_Scan_Failed:              { code: 4010, message: '扫描错误：扫描失败' },\n  Error_Scan_PowerOff:            { code: 4011, message: '扫描错误：蓝牙被关闭' },\n  Error_Scan_NoService:           { code: 4012, message: '扫描错误：没有找到指定服务' },\n  // Api: stopScan\n  Error_StopScan_Failed:          { code: 4020, message: '停止扫描错误：停止扫描失败' },\n  Error_StopScan_PowerOff:        { code: 4021, message: '停止扫描错误：蓝牙被关闭' },\n  // Api: connect\n  Error_Connect_Failed:           { code: 4030, message: '连接错误：连接失败' },\n  Error_Connect_PowerOff:         { code: 4031, message: '连接错误：蓝牙被关闭' },\n  Error_Connect_AlreadyConnected: { code: 4032, message: '连接错误：已经连接或正在连接' },\n  Error_Connect_Timeout:          { code: 4033, message: '连接错误：连接超时' },\n  Error_Connect_EmptyId:          { code: 4034, message: '连接错误：设备id不能为空' },\n  // Api: disconnect\n  Error_Disconnect_Failed:        { code: 4040, message: '断开错误：断开失败' },\n  // Api: read\n  Error_Read_Failed:              { code: 4050, message: '\b读特征值错误：读特征值失败'},\n  Error_Read_NotConnected:        { code: 4051, message: '读特征值错误：蓝牙未连接' },\n  Error_Read_NotSupport:          { code: 4052, message: '读特征值错误：当前特征不支持读操作' },\n  Error_Read_NoService:           { code: 4053, message: '读特征值错误：没有找到指定服务' },\n  Error_Read_NoCharacteristic:    { code: 4054, message: '读特征值错误：没有找到指定特征值' },\n  // Api: write\n  Error_Write_Failed:             { code: 4060, message: '\b写入数据错误：写入数据失败'},\n  Error_Write_NotConnected:       { code: 4061, message: '写入数据错误：蓝牙未连接' },\n  Error_Write_NotSupport:         { code: 4062, message: '写入数据错误：当前特征不支持写操作' },\n  Error_Write_NoService:          { code: 4063, message: '写入数据错误：没有找到指定服务' },\n  Error_Write_NoCharacteristic:   { code: 4064, message: '写入数据错误：没有找到指定特征值' },\n  // Api: notify\n  Error_Notify_Failed:            { code: 4070, message: '\b监听特征值错误：监听特征值错误失败' },\n  Error_Notify_NotConnected:      { code: 4071, message: '监听特征值错误：蓝牙未连接' },\n  Error_Notify_NotSupport:        { code: 4072, message: '监听特征值错误：当前特征不支持监听操作' },\n  Error_Notify_NoService:         { code: 4073, message: '监听特征值错误：没有找到指定服务' },\n  Error_Notify_NoCharacteristic:  { code: 4074, message: '监听特征值错误：没有找到指定特征值' },\n};\n\n","\n\nvar __TEMP__ = require('./enum.js');var ConnectStatus = __TEMP__['ConnectStatus'];var SuccessCallbackEvent = __TEMP__['SuccessCallbackEvent'];var ErrorCallbackEvent = __TEMP__['ErrorCallbackEvent'];var SuccessApiThen = __TEMP__['SuccessApiThen'];var ErrorApiCatch = __TEMP__['ErrorApiCatch'];\nvar __TEMP__ = require('./tools.js');var _ = __REQUIRE_DEFAULT__(__TEMP__);\n\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = class Bluetooth {\n\n  constructor(btmanager) {\n    this.bm = btmanager;\n    // 蓝牙适配器是否初始化完成\n    this.isInitializedAdapter = false;\n    // 蓝牙适配器是否可用\n    this.isAvailableAdapter = false;\n    // 初始化蓝牙适配器\n    this.openAndListenBluetoothAdapter().then(__=>__).catch(__=>__);\n    // 扫描到的设备\n    this.scanDevices = [];\n  }\n\n  /**\n   *  打开和监听蓝牙适配器\n   * \n   *  @return Promise对象\n   */\n  openAndListenBluetoothAdapter() {\n\n    // 未初始化蓝牙适配器，打开蓝牙适配器\n    if (!this.isInitializedAdapter) {\n\n      // 监听蓝牙适配器状态\n      _.api('offBluetoothAdapterStateChange').then(__ => __).catch(__ => __);\n      _.on('onBluetoothAdapterStateChange','' ,res => {\n        this.bm.log('onBluetoothAdapterStateChange', res);\n        if (res.available && !this.isAvailableAdapter) {\n          this.isAvailableAdapter = true;\n          this.callBackConnectStatus(SuccessCallbackEvent.Success_ConnectStatus_CB_PowerOn);\n        } else if (!res.available) {\n          this.isAvailableAdapter = false;\n          // 支付宝小程序当蓝牙适配器关闭，再次进行蓝牙操作需要重新打开，微信只需要打开一次就行\n          _.getAppPlatform() === 'ant' && (this.isInitializedAdapter = false);\n          this.bm.connectStatus = ConnectStatus.disconnected;\n          this.callBackConnectStatus(ErrorCallbackEvent.Error_ConnectStatus_CB_PowerOff);\n        }\n      });\n\n      // 先关闭再打开蓝牙适配器，避免出现某些机型打开无效的情况\n      return _.api('closeBluetoothAdapter')\n        .then(__ => {\n          // 打开蓝牙适配器\n          return _.api('openBluetoothAdapter')\n        }).then(res => {\n          this.bm.log('openBluetoothAdapter success', res);\n          this.isInitializedAdapter = true;\n          this.isAvailableAdapter = true;\n          return Promise.resolve();\n        }).catch(e => {\n          this.bm.log('openBluetoothAdapter fail', e);\n          this.isInitializedAdapter = false;\n          this.isAvailableAdapter = false;\n          this.bm.connectStatus = ConnectStatus.disconnected;\n          return Promise.reject(e);\n        })\n    } else {\n      return Promise.resolve();\n    }\n  }\n\n  /**\n   *  扫描外设\n   *\n   *  @param {object} options                扫描参数\n   *   @property {array} services             主service的uuid列表。确认在蓝牙广播中存在此服务id，可以通过服务id过滤掉其他设备\n   *   @property {boolean} allowDuplicatesKey 是否允许重复上报设备\n   *   @property {number} interval            上报新设备的间隔，默认为0\n   *   @property {number} timeout             扫描超时时间，毫秒。在该时间内未扫描到符合要求的设备，上报超时。默认1500ms，-1表示无限超时\n   *   @property {string} deviceName          通过蓝牙名称过滤，需要匹配的设备名称\n   *   @property {string} containName         通过蓝牙名称过滤，需要包含的设备名称\n   * \n   *  @return Promise对象\n   * \n   *  @discussion 开始扫描外设，注意实现返回对象的then和catch方法，监听接口是否调用成功。\n   *              此操作比较耗费系统资源，请在搜索到设备后调用stopScan方法停止扫描。\n   *              重复调用此接口，会清空之前设备存储，再次上报已上报的设备，能够起到刷新的作用。\n   * \n   *  @see registerDidDiscoverDevice\n   */\n  scanDevice(options) {\n\n    // 解构参数\n    let { services, allowDuplicatesKey, interval, timeout, deviceName, containName} = options;\n\n    // 打开和监听蓝牙适配器\n    return this.openAndListenBluetoothAdapter()\n      .then(__ => {\n        // 清空存储的设备\n        this.scanDevices = [];\n        // 销毁扫描延时\n        this.destoryTimer();\n        // 设置扫描超时\n        this.scanTimeoutTimer = timeout!==-1 ? setTimeout(() => {\n          this.stopScan();\n          if (this.scanDevices.length === 0) { // 扫描超时\n            this.bm.log('startBluetoothDevicesDiscovery fail ' , 'timeout');\n            this.callBackDiscoverDevice(null, ErrorCallbackEvent.Error_DiscoverDevice_CB_Timeout, true);\n          } else {// 扫描时间结束\n            this.callBackDiscoverDevice(null, SuccessCallbackEvent.Success_DiscoverDevice_CB_ScanDone, false);\n          }\n        }, timeout || 15000) : null;\n        // 开始扫描\n        return _.api('startBluetoothDevicesDiscovery', '' ,{\n          services,\n          allowDuplicatesKey,\n          interval\n        })\n      }).then(res => {\n        this.bm.log('startBluetoothDevicesDiscovery success', res);\n        // 取消设备监听，仅支付宝小程序有效\n        _.api('offBluetoothDeviceFound').then(__ => __).catch(__ => __);\n        // 监听扫描到外设\n        _.on('onBluetoothDeviceFound','', res => {\n          // this.bm.log('onBluetoothDeviceFound' , res);\n          let devices = res.devices || res;\n          // 过滤、格式化、存储、上报设备\n          for (let device of devices) {\n            if (Array.isArray(device)) device = devices[0][0];\n            // 信号强度为127表示RSSI不可用\n            if (device.RSSI === 127) return;\n            // 匹配名称，过滤设备\n            let name = device.name || device.deviceName;\n            device.name = name;\n            if (deviceName && (!name || name !== deviceName)) return;\n            if (containName && (!name || !~name.indexOf(containName))) return;\n            // 格式化广播数据\n            if (typeof device.advertisData !== 'string') device.advertisData = _.ab2str(device.advertisData);\n            // 上报设备\n            this.callBackDiscoverDevice(device, SuccessCallbackEvent.Success_DiscoverDevice_CB_Discover, false);\n            // 更新不重复记录设备\n            for (let v of this.scanDevices) {\n              if (v.deviceId === device.deviceId) {\n                  Object.assign(v, device);\n                return;\n              }\n            }\n            // 存储新设备\n            this.scanDevices.push(device);\n          }\n        })\n        return Promise.resolve(SuccessApiThen.Success_Scan);\n      }).catch(e => {\n        this.bm.log('startBluetoothDevicesDiscovery fail', e);\n        if (e.code === 12 || e.code === 10001) {\n          return Promise.reject(ErrorApiCatch.Error_Scan_PowerOff);\n        } else if (e.code === 10012 || e.code === 10004) {\n          return Promise.reject(ErrorApiCatch.Error_Scan_NoService);\n        } else {\n          return Promise.reject(ErrorApiCatch.Error_Scan_Failed);\n        }\n      })\n  }\n\n  /**\n   *  停止扫描\n   *\n   *  @return Promise对象\n   * \n   *  @discussion 停止扫描，取消超时延时。\n   */\n  stopScan() {\n    // 销毁扫描延时\n    this.destoryTimer();\n    // 取消设备监听，仅支付宝小程序有效\n    _.api('offBluetoothDeviceFound').then(__ => __).catch(__ => __);\n    // 停止扫描\n    return _.api('stopBluetoothDevicesDiscovery')\n      .then(res => {\n        this.bm.log('stopBluetoothDevicesDiscovery success', res);\n        return Promise.resolve(SuccessApiThen.Success_StopScan);\n      }).catch(e => {\n        this.bm.log('stopBluetoothDevicesDiscovery fail', e);\n        if (e.code === 12 || e.code === 10001) {\n          return Promise.reject(ErrorApiCatch.Error_StopScan_PowerOff);\n        } else {\n          return Promise.reject(ErrorApiCatch.Error_StopScan_Failed);\n        }\n      })\n  }\n\n  /**\n   *  连接外设\n   * \n   *  @param {object} device  指定连接的外设对象，从registerDidDiscoverDevice注册的回调中得到\n   *  @param {number} timeout 连接超时时间，毫秒，默认15000ms，支付宝小程序无效\n   * \n   *  @return Promise对象\n   * \n   *  @discussion 连接指定的外设，需要传入外设对象。\n   *              注意实现返回对象的then和catch方法，监听接口是否调用成功。\n   */\n  connect(device , timeout) {\n    // 判断是否已经连接\n    if (this.bm.connectStatus !== ConnectStatus.disconnected) {\n      this.bm.logwarn('connect fail', 'Is already connected');\n      return Promise.reject(ErrorApiCatch.Error_Connect_AlreadyConnected);\n    }\n    // 判断设备id是否为空\n    if (_.isEmpty(device.deviceId)) {\n      return Promise.reject(ErrorApiCatch.Error_Connect_EmptyId);\n    }\n\n    this.bm.deviceInfo = device;\n    this.bm.connectStatus = ConnectStatus.connecting;\n    this.callBackConnectStatus(SuccessCallbackEvent.Success_ConnectStatus_CB_Connecting);\n    let deviceId = device.deviceId;\n\n    // 打开和监听蓝牙适配器\n    return this.openAndListenBluetoothAdapter()\n      .then(__ => {\n        // 连接设备\n        return _.api('createBLEConnection', 'connectBLEDevice', {\n          deviceId ,\n          timeout: timeout || 15000 ,\n        })\n      }).then( res => {\n        this.bm.log('connectBLEDevice success', res);\n        // 取消蓝牙连接状态监听，仅支付宝小程序有效\n        _.api('offBLEConnectionStateChanged').then(__ => __).catch(__ => __);\n        // 蓝牙连接状态监听\n        _.on('onBLEConnectionStateChange', 'onBLEConnectionStateChanged',(res) => {\n          this.bm.log('onBLEConnectionStateChange', res);\n          if (!res.connected && this.bm.connectStatus !== ConnectStatus.disconnected) {\n            this.bm.connectStatus = ConnectStatus.disconnected;\n            if (res.errorCode === 0) {\n              this.callBackConnectStatus(SuccessCallbackEvent.Success_ConnectStatus_CB_Stop);\n            } else if (res.errorCode === 10003) {\n              this.callBackConnectStatus(ErrorCallbackEvent.Error_ConnectStatus_CB_Disconnected);\n            } else if (_.getAppPlatform() === 'ant'){\n              this.callBackConnectStatus(ErrorCallbackEvent.Error_ConnectStatus_CB_Disconnected);\n            }\n          }\n        })\n\n        // 获取设备所有服务\n        _.api('getBLEDeviceServices', '', { deviceId })\n          .then(res => {\n            this.bm.log('getBLEDeviceServices success', res);\n            // 存储所有服务promise\n            let sPromises = [];\n            // 获取所有服务的所有特征\n            device.services = res.services.map(server => {\n              let sUUID = server.uuid || server.serviceId;\n              let sPromise = _.api('getBLEDeviceCharacteristics', '', {\n                deviceId,\n                serviceId: sUUID\n              })\n              sPromises.push(sPromise);\n              return { serviceId: sUUID };\n            })\n            return Promise.all(sPromises);\n          }).then(res => {\n            this.bm.log('getBLEDeviceCharacteristics success', res);\n            device.services = res.map((v, i) => {\n              let service = device.services[i];\n              service.characteristics = v.characteristics;\n              return service;\n            })\n            // 获取特征成功之后才算连接成功\n            this.bm.deviceInfo = device;\n            this.bm.connectStatus = ConnectStatus.connected;\n            this.callBackConnectStatus(SuccessCallbackEvent.Success_ConnectStatus_CB_Connected);\n          }).catch(e => {\n            this.bm.log('api connecting error', e);\n            // 出现错误断开蓝牙，避免出现已连接成功未找到服务或者特征出错时，再次连接状态不正确\n            _.api('closeBLEConnection', 'disconnectBLEDevice', {\n              deviceId: this.bm.deviceInfo.deviceId\n            }).then(__ => __).catch(__ => __);\n            this.bm.connectStatus = ConnectStatus.disconnected;\n            this.callBackConnectStatus(e);\n          })\n\n        // 开始连接接口调用成功\n        return Promise.resolve(SuccessApiThen.Success_Connect);\n      }).catch(e => {\n        this.bm.log('api connect error', e);\n        // 未知错误，直接报连接失败\n        if (e.code === 100000) e = ErrorCallbackEvent.Error_ConnectStatus_CB_ConnectFail;\n        this.bm.connectStatus = ConnectStatus.disconnected;\n        this.callBackConnectStatus(e);\n        if (e.code === 12 || e.code === 10001) {\n          return Promise.reject(ErrorApiCatch.Error_Connect_PowerOff);\n        } else if (~e.message.indexOf('超时') || (e.errMsg && ~e.errMsg.indexOf('time out'))){\n          return Promise.reject(ErrorApiCatch.Error_Connect_Timeout);\n        } else {\n          return Promise.reject(ErrorApiCatch.Error_Connect_Failed);\n        }\n      })\n  }\n\n  /**\n   *  断开连接\n   * \n   *  @return Promise对象\n   */\n  disconnect() {\n\n    this.bm.connectStatus === ConnectStatus.connected && \n    _.api('closeBLEConnection','disconnectBLEDevice',{\n        deviceId: this.bm.deviceInfo.deviceId\n      }).then(res => {\n        this.bm.log('closeBLEConnection success', res);\n      }).catch(e => {\n        this.bm.log('closeBLEConnection fail', e);\n      })\n      \n    _.api('closeBluetoothAdapter')\n      .then(res => {\n        this.bm.log('closeBluetoothAdapter success', res);\n        this.isInitializedAdapter = false;\n        if (this.bm.connectStatus !== ConnectStatus.disconnected) {\n          this.bm.connectStatus = ConnectStatus.disconnected;\n          this.callBackConnectStatus(SuccessCallbackEvent.Success_ConnectStatus_CB_Stop);\n        };\n        this.bm.connectStatus = ConnectStatus.disconnected;\n      }).catch(e => {\n        this.bm.log('closeBluetoothAdapter fail', e);\n      })\n\n    return Promise.resolve(SuccessApiThen.Success_Disconnect);\n  }\n\n  /**\n   *  读特征值\n   * \n   *  @param {object} params               参数\n   *   @property {string} suuid            特征对应的服务uuid\n   *   @property {string} cuuid            写入特征uuid\n   * \n   *  @discussion 读某个服务下的某个特征值。\n   */\n  read(params) {\n    if (this.bm.connectStatus === ConnectStatus.connected) {\n      let { suuid, cuuid } = params;\n      return _.api('readBLECharacteristicValue', '', {\n        deviceId: this.bm.deviceInfo.deviceId,\n        serviceId: suuid,\n        characteristicId: cuuid,\n      }).then(res => {\n        this.bm.log('readBLECharacteristicValue success', res);\n        return Promise.resolve(SuccessApiThen.Success_Read);\n      }).catch(e => {\n        this.bm.log('readBLECharacteristicValue fail', e);\n        if (e.code === 10007) {\n          return Promise.reject(ErrorApiCatch.Error_Read_NotSupport);\n        } else if (e.code === 10004) {\n          return Promise.reject(ErrorApiCatch.Error_Read_NoService);\n        } else if (e.code === 10005) {\n          return Promise.reject(ErrorApiCatch.Error_Read_NoCharacteristic);\n        } else {\n          return Promise.reject(ErrorApiCatch.Error_Read_Failed);\n        }\n      })\n    } else {\n      return Promise.reject(ErrorApiCatch.Error_Read_NotConnected);\n    }\n  }\n\n  /**\n   *  向蓝牙模块写入数据\n   * \n   *  @param {object} params        参数\n   *   @property {string} suuid       特征对应的服务uuid\n   *   @property {string} cuuid       写入特征uuid\n   *   @property {Hex string} value   16进制字符串 \n   * \n   *  @return Promise对象\n   * \n   *  @discussion 向蓝牙模块写入数据。\n   */\n  write(params) {\n    let {suuid , cuuid , value} = params;\n    if (this.bm.connectStatus === ConnectStatus.connected) {\n      if (_.getAppPlatform() === 'wx') {\n        if (typeof value === 'string') {\n          value = _.str2ab(value);\n        } else {\n          value = typedArrayToArrayBuffer(value);\n        }\n      } else if (typeof value !== 'string'){\n        value = _.ab2str(value);\n      }\n      this.bm.log('writeCmdToDevice', _.ab2str(value));\n      return _.api('writeBLECharacteristicValue', '', {\n        deviceId: this.bm.deviceInfo.deviceId,\n        serviceId: suuid,\n        characteristicId: cuuid,\n        value,\n      }).then(res => {\n        this.bm.log('writeBLECharacteristicValue success', res);\n        return Promise.resolve(SuccessApiThen.Success_Write);\n      }).catch(e => {\n        this.bm.log('writeBLECharacteristicValue fail', e);\n        if (e.code === 10007) {\n          return Promise.reject(ErrorApiCatch.Error_Write_NotSupport);\n        } else if (e.code === 10004) {\n          return Promise.reject(ErrorApiCatch.Error_Write_NoService);\n        } else if (e.code === 10005) {\n          return Promise.reject(ErrorApiCatch.Error_Write_NoCharacteristic);\n        } else {\n          return Promise.reject(ErrorApiCatch.Error_Write_Failed);\n        }\n      })\n    } else {\n      return Promise.reject(ErrorApiCatch.Error_Write_NotConnected);\n    }\n  }\n\n  /**\n   *  监听特征值改变\n   * \n   *  @param {object} params        参数\n   *   @property {string} suuid       特征对应的服务uuid\n   *   @property {string} cuuid       写入特征uuid\n   *   @property {boolean} state      是否启用notify，可以通过重复调用接口改变此属性打开/关闭监听  \n   * \n   *  @return Promise对象\n   * \n   *  @discussion 监听某个特征值变化。\n   */\n  notify(params) {\n    if (this.bm.connectStatus === ConnectStatus.connected) {\n      let { suuid, cuuid, state } = params;\n      return _.api('notifyBLECharacteristicValueChange', '', {\n        deviceId: this.bm.deviceInfo.deviceId,\n        serviceId: suuid,\n        characteristicId: cuuid,\n        state\n      }).then(res => {\n        this.bm.log('readBLECharacteristicValue success', res);\n        return Promise.resolve(SuccessApiThen.Success_Notify);\n      }).catch(e => {\n        this.bm.log('readBLECharacteristicValue fail', e);\n        if (e.code === 10007) {\n          return Promise.reject(ErrorApiCatch.Error_Notify_NotSupport);\n        } else if (e.code === 10004) {\n          return Promise.reject(ErrorApiCatch.Error_Notify_NoService);\n        } else if (e.code === 10005) {\n          return Promise.reject(ErrorApiCatch.Error_Notify_NoCharacteristic);\n        } else {\n          return Promise.reject(ErrorApiCatch.Error_Notify_Failed);\n        }\n      })\n    } else {\n      return Promise.reject(ErrorApiCatch.Error_Notify_NotConnected);\n    }\n  }\n\n  /**\n   *  注册状态改变回调\n   *\n   *  @param {function} cb 回调函数\n   * \n   *  @discussion 连接状态发生改变时，回调此方法。\n   */\n  registerDidUpdateConnectStatus(cb) {\n    this._didUpdateStatusCB = cb;\n  }\n\n  /**\n   *  注册发现外设回调\n   *\n   *  @param {function} cb 回调函数\n   * \n   *  @discussion 当扫描到设备时回调\n   */\n  registerDidDiscoverDevice(cb) {\n    this._didDiscoverDeviceCB = cb;\n  }\n\n  /**\n   *  注册\b特征值改变回调\n   *\n   *  @param {function} cb 回调函数\n   * \n   *  @discussion 当监听的特征值改变时回调\n   */\n  registerDidUpdateValueForCharacteristic(cb) {\n    this._didUpdateValueCB = cb;\n    _.api('offBLECharacteristicValueChange').then(__ => __).catch(__ => __);\n    _.on('onBLECharacteristicValueChange', '' ,characteristic => {\n      if (typeof characteristic.value === 'string') {\n        this._didUpdateValueCB(characteristic);\n      } else {\n        characteristic.value = _.ab2str(characteristic.value);\n        this._didUpdateValueCB(characteristic);\n      }\n    })\n  }\n\n  /**\n   * 回调蓝牙连接状态\n   */\n  callBackConnectStatus(status) {\n    this._didUpdateStatusCB && this._didUpdateStatusCB({\n      ...status,\n      device:this.bm.deviceInfo,\n      connectStatus:this.bm.connectStatus\n    });\n  }\n\n  /**\n   * 回调发现外设\n   * \n   * @param device 扫描到的设备\n   */\n  callBackDiscoverDevice(device , event , timeout) {\n    this._didDiscoverDeviceCB && this._didDiscoverDeviceCB(\n      device ? {\n        ...event,\n        timeout,\n        device,\n      } : {\n        ...event,\n        timeout,\n      }\n    )\n  }\n\n  /**\n   * 销毁延时\n   */\n  destoryTimer() {\n    this.scanTimeoutTimer && clearTimeout(this.scanTimeoutTimer);\n    this.scanTimeoutTimer = null;\n  }\n};","\n\n\nvar __TEMP__ = require('./promisify.js');var getAppPlatform = __TEMP__['getAppPlatform'];var api = __TEMP__['api'];var on = __TEMP__['on'];\n\n/**\n * 判断字符串是否为空或者空格\n */\nfunction isEmpty(str = '') {\n  return !str || str == '' || str.replace(/(^\\s*)|(\\s*$)/g, \"\") == \"\";\n}\n\n/**\n * 判断是否为null或者未定义\n */\nfunction isNullOrUndefined(obj) {\n  return obj === undefined || obj === null;\n}\n\n/**\n * ArrayBuffer类型转换为16进制字符串\n */\nfunction ab2str(buffer) {\n  return Array.prototype.map.call(new Uint8Array(buffer), x => ('00' + x.toString(16)).slice(-2)).join('');\n}\n\n/**\n * 字符串转为ArrayBuffer对象，参数为字符串\n */\nfunction str2ab(str) {\n  var buf = new ArrayBuffer(str.length / 2);\n  var bufView = new Uint8Array(buf);\n  for (var i = 0; i < str.length; i += 2) {\n    bufView[parseInt(i / 2)] = char2Hex(str.charCodeAt(i)) << 4 | char2Hex(str.charCodeAt(i + 1));\n  }\n  return buf;\n}\n\n/**\n *  字符转十六进制\n */\nfunction char2Hex(bChar) {\n  if ((bChar >= 0x30) && (bChar <= 0x39)) { // 数字\n    bChar -= 0x30;\n  } else if ((bChar >= 0x41) && (bChar <= 0x46)) { // 大写字母\n    bChar -= 0x37;\n  } else if ((bChar >= 0x61) && (bChar <= 0x66)) { // 小写字母\n    bChar -= 0x57;\n  } else {\n    bChar = 0xff;\n  }\n  return bChar;\n}\n\n/**\n * TypedArray转为ArrayBuffer\n */\nfunction typedArray2ArrayBuffer(pbuff) {\n  let buffer = new ArrayBuffer(pbuff.byteLength)\n  let uInit8 = new Uint8Array(buffer)\n  uInit8.set(pbuff);\n  return buffer;\n}\n\n/**\n *  获取异或校验数值\n *\n *  @param p 参与运算的字符数组指针\n *  @param len 参与运算的字符数组长度\n */\nfunction createXOR(b, p, len) {\n  let i = 0;\n  let ckc = 0;\n  for (; i < len; i++) {\n    ckc = ckc ^ b[p + i];\n  }\n  return ckc;\n}\n\n/**\n * UUID128位转换为16位\n * \n * @param uuid128 128位的uuid\n */\nfunction uuid128to16(uuid128) {\n  let arr = uuid128.split('-');\n  if (arr.length === 5 && arr[4] === '00805F9B34FB') {\n    return arr[0].slice(3);\n  } else {\n    return uuid128;\n  }\n}\n\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = {\n  getAppPlatform,\n  api,\n  on,\n  isEmpty,\n  isNullOrUndefined,\n  ab2str,\n  str2ab,\n  typedArray2ArrayBuffer,\n  createXOR,\n  uuid128to16\n};\n\n\n","\n// 判断是微信小程序还是支付宝小程序 \nlet ii, mini;\ntry {\n  ii = wx;\n  mini = 'wx';\n} catch (e) {\n  ii = my;\n  mini = 'ant';\n}\n\nvar __TEMP__ = require('./enum.js');var ErrorApiCatch = __TEMP__['ErrorApiCatch'];\n\n// 微信系统错误\nconst ERROR_WX = {\n  NOT_INIT:             { code: 10000, message: '未初始化蓝牙适配器' },\n  NOT_AVAILABLE:        { code: 10001, message: '当前蓝牙适配器不可用' },\n  NO_DEVICE:            { code: 10002, message: '没有找到指定设备' },\n  CONNECTION_FAIL:      { code: 10003, message: '连接失败' },\n  NO_SERVICE:           { code: 10004, message: '没有找到指定服务' },\n  NO_CHARACTERISTIC:    { code: 10005, message: '没有找到指定特征值' },\n  NO_CONNECTION:        { code: 10006, message: '当前连接已断开' },\n  PROPERTY_NOT_SUPPORT: { code: 10007, message: '当前特征值不支持此操作' },\n  SYSTEM_ERROR:         { code: 10008, message: '系统异常' },\n  SYSTEM_NOT_SUPPORT:   { code: 10009, message: 'Android 系统版本低于 4.3 不支持 BLE' },\n  OPERATE_TIMEOUT:      { code: 10012, message: '操作超时' },\n  INVALID_PARAMETER:    { code: 10013, message: '无效参数' },\n  ALREADY_CONNECTED:    { code: -1   , message: '蓝牙已连接，不能再连接' },\n  UN_KNOWN:             { code: 100000,message: '未知' },\n}\n\n// 支付宝系统错误\nconst ERROR_ANT = {\n  POWER_OFF:                 { code: 12,    message: '蓝牙未打开' },\n  LOST_SERVICE:              { code: 13,    message: '与系统服务的链接暂时丢失' },\n  UNAUTH_BLE:                { code: 14,    message: '未授权支付宝使用蓝牙功能' },\n  UNKNOWN_ERROR:             { code: 15,    message: '未知错误' },\n  NOT_INIT:                  { code: 10000, message: '未初始化蓝牙适配器' },\n  NOT_AVAILABLE:             { code: 10001, message: '当前蓝牙适配器不可用' },\n  NO_DEVICE:                 { code: 10002, message: '没有找到指定设备' },\n  CONNECTION_FAIL:           { code: 10003, message: '连接失败' },\n  NO_SERVICE:                { code: 10004, message: '没有找到指定服务' },\n  NO_CHARACTERISTIC:         { code: 10005, message: '没有找到指定特征值' },\n  NO_CONNECTION:             { code: 10006, message: '当前连接已断开' },\n  PROPERTY_NOT_SUPPORT:      { code: 10007, message: '当前特征值不支持此操作' },\n  SYSTEM_ERROR:              { code: 10008, message: '系统异常' },\n  SYSTEM_NOT_SUPPORT:        { code: 10009, message: 'Android 系统版本低于 4.3 不支持 BLE' },\n  SYMBOL_UNFOUND:            { code: 10010, message: '没有找到指定描述符' },\n  DEVICE_ID_INVALID:         { code: 10011, message: '设备 id 不可用/为空' },\n  SERVICE_ID_INVALID:        { code: 10012, message: '服务 id 不可用/为空' },\n  CHARACTERISTIC_ID_INVALID: { code: 10013, message: '特征 id 不可用/为空' },\n  CMD_FORMAT_ERROR:          { code: 10014, message: '发送的数据为空或格式错误' },\n  OPERATION_TIMEOUT:         { code: 10015, message: '操作超时' },\n  LACK_PARAMETER:            { code: 10016, message: '缺少参数' },\n  WRITE_ERROR:               { code: 10017, message: '写入特征值失败' },\n  READ_ERROR:                { code: 10018, message: '读取特征值失败' },\n}\n\nconst ERROR_TYPES = mini==='wx' ? ERROR_WX : ERROR_ANT;\n\n/**\n * 获取错误类型\n */\nfunction getErrorType(code) {\n  for (let key of Object.keys(ERROR_TYPES)) {\n    if (code === ERROR_TYPES[key].code) {\n      return ERROR_TYPES[key];\n    }\n  }\n  return ERROR_TYPES.UN_KNOWN;\n}\n\n/**\n * 获取小程序平台 wx||ant\n */\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.getAppPlatform = function getAppPlatform() {\n  return mini;\n};\n\n/**\n *  重写异步API\n * \n *  @param {string} fn1 方法名1\n *  @param {string} fn2 方法名2\n *  @param {object} options 可选参数\n * \n *  @return Promise对象\n */\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.api = function api(fn1, fn2, options) {\n  let func = ii[fn1] || ii[fn2];\n  return new Promise((resolve, reject) => {\n    let params = {\n      success(res) {\n        resolve(res);\n      },\n      fail(res) {\n        if (res.errorMessage) {\n          reject({\n            code: res.error,\n            message: res.errorMessage\n          });\n        } else {\n          reject({\n            ...getErrorType(res.errCode),\n            errMsg: res.errMsg\n          });\n        }\n      },\n      complete(res) {\n        //...\n      }\n    }\n    if (options) {\n      params = Object.assign(params, options);\n    }\n    if (func) {\n      func(params);\n    } else {\n      reject(ErrorApiCatch.Error_Low_Version);\n    }\n  })\n};\n\n/**\n *  重写回调API\n * \n *  @param {string} fn1 方法名1\n *  @param {string} fn2 方法名2\n *  @param {function} cb 回调函数\n */\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.on = function on(fn1, fn2, cb) {\n  let func = ii[fn1] || ii[fn2];\n  if (func) {\n    if (mini === 'wx') {\n      func(cb);\n    } else {\n      func({\n        success: cb,\n      })\n    }\n  }\n};"]}